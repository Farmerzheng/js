 /*
    面向过程开发
    c : 距离的增量
    b : 初始的位置
    d : 终止时刻
    t : 开始时刻
*/
//全局的变量在哪里都能够访问到
  
  let t = 0,
    b = 0,
    c = 300,
    d = 10;

  let btn = document.querySelector(".btn");
  let box = document.querySelector(".box");
  //开关
  let moveBoolean = false;
  //绑定事件 
  btn.addEventListener("click", btnClickHandler);
  // 事件处理函数
  function btnClickHandler() {
    // 打开开关
    moveBoolean = true;
  }

  // 更新盒子的函数
  function update() {
    // 判断开关是否打开
    if (moveBoolean == false) return;
    // 时间增加
    t += 0.1;
    // 如果到达终止时间就停止
    if (t >= d) {
      return;
    }
    // 盒子的运动曲线（Tween_basic.js当中为我们提供了Tween类）
    // let s = Tween.Linear(t, b, c, d)
    // let s = Tween.Bounce.easeIn(t, b, c, d);
    // let s = Tween.Bounce.easeOut(t, b, c, d);
    let s = Tween.Quad.easeOut(t, b, c, d)
    // 渲染
    box.style.left = s + "px";
  }
  // 创建一个永动机
  animation();

  function animation() {
    requestAnimationFrame(animation);
    // 永动机里面调用更新盒子的函数
    update();
  }



  面向对象开发

    let btn = document.querySelector(".btn");
  let box = document.querySelector(".box");
  function Move(btn, box) {
    this.btn = btn;
    this.box = box;
    this.moveBoolean = false;
    this.t = 0;
    this.b = 0;
    this.c = 300;
    this.d = 10;
  }
  Move.prototype = {
    init:function() {
      this.bindEvent();
    },
    bindEvent: function() {
      this.btn.addEventListener("click", this.btnClickHandler.bind(this));
    },
    btnClickHandler: function() {
      this.moveBoolean = true;
    },
    update: function() {
      // 判断开关是否打开
      if (this.moveBoolean == false) return;
      // 时间增加
      this.t += 0.1;
      // 如果到达终止时间就停止
      if (this.t >= this.d) {
        return;
      }
      // 盒子的运动曲线
      let s = Tween.Quad.easeOut(this.t, this.b, this.c, this.d)
      // 渲染
      this.box.style.left = s + "px";
    }
  }
  let move = new Move(btn, box);
  move.init();
  // 创建一个永动机
  animation();
  function animation() {
    requestAnimationFrame(animation);
    // 永动机里面调用更新盒子的函数
    move.update();
  }
  