/*
  对象需要什么，我们就添加什么

   Fade  
   param:
     oImg : 必选 ，要淡入淡出的图片对象
     speed ： 可选 ，Number , 图片淡入淡出的速度

*/
function Fade(oImg, speed) {
  // 默认速度值是5
  this.speed = speed || 5;
  // 将传入的参数作为对象的属性
  this.img = oImg;
  // 需要一个属性控制 opacity 的值
  this.opacity = 1;
  // 需要一个属性来控制动画的开始和结束（开关按钮）
  this.mouseoverBoolean = false;
}

// 构造函数的方法写在原型对象上面
Fade.prototype = {
  //对象的初始化方法
  init: function() {
    // 初始化的时候挂接事件
    this.bindEvent();
  },
  bindEvent: function() {
    // 挂接事件处理函数
    this.img.addEventListener("mouseover", this.mouseoverHandler.bind(this));
    this.img.addEventListener("mouseout", this.mouseoutHandler.bind(this));
  },
  mouseoverHandler: function() {
    this.mouseoverBoolean = true;
  },
  mouseoutHandler: function() {
    this.mouseoverBoolean = false;
  },
  update: function() {
    // 让opacity变量缓慢的变化
    if (this.mouseoverBoolean && this.opacity >= 0) {
      // 鼠标移入
      this.opacity -= this.speed / 100;
    }
    if (!this.mouseoverBoolean && this.opacity < 1) {
      //鼠标移出
      this.opacity += this.speed / 100;
    }
    // 渲染（将数据的变化反映到页面上）
    this.img.style.opacity = this.opacity;
  }
}


/* 面向对象
    面向对象书写过程？ 缺什么补什么（缺属性就补属性，缺方法就补方法）

  */

  let box = {
    init: function() {
      this.box = document.querySelector(".box");
      this.startBtn = document.querySelector("#start");
      this.endBtn = document.querySelector("#end");
      this.moveBoolean = false;
      this.speed = 2;
      this.bindEvent();
    },
    bindEvent: function() {
      // 事件处理函数当中的this指针指向的是挂接的那个按钮
      //  startClickHandler.bind(this)  当中的this指 obj
      //  startClickHandler.bind(this) 改变了事件处理函数当中this指针的指向
      //  startClickHandler.bind(this) 并不是执行函数，bind方法有返回值，返回函数本身

      this.startBtn.addEventListener("click", this.startClickHandler.bind(this));
      this.endBtn.addEventListener("click", this.endClickHandler.bind(this));
    },
    startClickHandler: function() {
      this.moveBoolean = true
    },
    endClickHandler: function() {
      this.moveBoolean = false
    },
    update: function() {
      console.log(this.moveBoolean)
      if (this.moveBoolean) {
        this.box.style.left = this.box.offsetLeft + this.speed + "px"
      }
    }
  }
  box.init()

  // 永动机（循环体）
  animation();

  //盒子没有运动 ---> this.moveBoolean
  // 断点调试？  --- > 点击不了开始按钮
  // 另一种调试方法？ ----> 控制台打印(this.moveBoolean)
  // 点击开始的时候moveBoolean没有改变
  // 初始化对象（box.init()）没必要放入永动机当中

  function animation() {
    requestAnimationFrame(animation);
    box.update();
  }